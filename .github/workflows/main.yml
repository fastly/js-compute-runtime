name: CI
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow}}
  cancel-in-progress: true
on:
  pull_request:
  push: 
    branches: [main]
defaults:
  run:
    shell: bash
env:
  viceroy_version: 0.3.5

jobs:
  build:
    name: Build
    strategy:
      matrix:
        profile: [debug, release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ./.github/actions/cache-crates
      with:
        lockfiles: 'c-dependencies/js-compute-runtime/**/Cargo.lock'

    - uses: ./.github/actions/install-rust
      with:
        path: c-dependencies

    - name: Cache SpiderMonkey object files
      uses: actions/cache@v3
      id: sm-cache
      with:
        path: |
          c-dependencies/spidermonkey/${{ matrix.profile }}
        key: cache-${{ hashFiles(
            'c-dependencies/spidermonkey/build-engine.sh',
            'c-dependencies/spidermonkey/gecko-revision',
            'c-dependencies/spidermonkey/object-files.list',
            'c-dependencies/rust-toolchain.toml'
          ) }}-${{ matrix.profile }}
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    - name: "Build SpiderMonkey"
      if: steps.sm-cache.outputs.cache-hit != 'true'
      run: |
        cd c-dependencies/spidermonkey/
        sudo apt-get update -y
        bash ./build-engine.sh ${{ matrix.profile }}

    - name: "Install wasi-sdk-19 (linux)"
      run: |
        set -x
        curl -sS -L -O https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-19/wasi-sdk-19.0-linux.tar.gz
        tar xf wasi-sdk-19.0-linux.tar.gz
        sudo mkdir -p /opt/wasi-sdk
        sudo mv wasi-sdk-19.0/* /opt/wasi-sdk/

    - name: "Install Binaryen (linux)"
      run: |
        set -x
        export BINARYEN_VERSION=105
        curl -sS -L "https://github.com/WebAssembly/binaryen/releases/download/version_${BINARYEN_VERSION}/binaryen-version_${BINARYEN_VERSION}-x86_64-linux.tar.gz" | tar xzf - &&
        echo "$PWD/binaryen-version_${BINARYEN_VERSION}/bin" >> $GITHUB_PATH

    - name: Cache built Rust dependencies
      uses: actions/cache@v3
      with:
        path: c-dependencies/js-compute-runtime/rusturl
        key: engine-cargo-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('c-dependencies/rust-toolchain.toml', 'c-dependencies/js-compute-runtime/**/Cargo.lock') }}
        # We trust cargo to only reuse valid parts of the cache when dependencies change.
        restore-keys: engine-cargo-${{ runner.os }}-${{ runner.arch }}-
      # Out of an abundance of caution, ensure that tagged releases rebuild all
      # crates from source.
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    - name: "Build JS runtime (debug)"
      run: DEBUG=1 OPT_FLAGS="-O1" npm run build
      if: matrix.profile == 'debug'

    - name: "Build JS runtime (release)"
      run: npm run build
      if: matrix.profile == 'release'

    - uses: actions/upload-artifact@v3
      with:
        name: engine-${{ matrix.profile }}
        path: |
          js-compute-runtime.wasm
          js-compute-runtime-component.wasm

  ensure_cargo_installs:
    name: Ensure that all required "cargo install" commands are run, or we have a cache hit
    strategy:
      matrix:
        include:
          - crate: viceroy
            version: 0.3.5 # Note: workflow-level env vars can't be used in matrix definitions
            options: ""
    runs-on: ubuntu-latest
    steps:
    - name: Cache ${{ matrix.crate }} ${{ matrix.version }}
      id: cache-crate
      uses: actions/cache@v3
      with:
        path: "/home/runner/.cargo/bin/${{ matrix.crate }}"
        key: crate-cache-${{ matrix.crate }}-${{ matrix.version }}
    - name: Install ${{ matrix.crate }} ${{ matrix.version }}
      run: cargo install ${{ matrix.crate }} ${{ matrix.options }} --version ${{ matrix.version }}
      if: steps.cache-crate.outputs.cache-hit != 'true'

  run_wpt:
    if: github.ref != 'refs/heads/main'
    name: Run Web Platform Tests
    strategy:
      matrix:
        include:
          - profile: debug
          - profile: release
    needs: [build, ensure_cargo_installs]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Download Engine
      uses: actions/download-artifact@v3
      with:
        name: engine-${{ matrix.profile }}

    - name: Restore Viceroy from cache
      uses: actions/cache@v3
      with:
        path: "/home/runner/.cargo/bin/viceroy"
        key: crate-cache-viceroy-${{ env.viceroy_version }}
    
    - run: yarn install --frozen-lockfile

    - name: Build WPT runtime
      run: |
        bash ./tests/wpt-harness/build-wpt-runtime.sh

    - name: Prepare WPT hosts
      run: |
        cd tests/wpt-harness/wpt
        ./wpt make-hosts-file | sudo tee -a /etc/hosts

    - name: Run tests
      timeout-minutes: 20
      run: |
        # Skip slow tests when testing the debug runtime.
        node ./tests/wpt-harness/run-wpt.mjs -vv $(((${{ matrix.profile }} == "debug")) && echo "--skip-slow-tests")

  # Consumes all published artifacts from all the previous build steps, and runs
  # the integration tests for the linux build.
  sdktest:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, ensure_cargo_installs]
    strategy:
      fail-fast: false
      matrix:
        fixture: 
          - async-select
          - btoa
          - byte-repeater
          - config-store
          - console
          - dynamic-backend
          - edge-dictionary
          - env
          - error
          - extend-from-builtins
          - extend-from-request
          - geoip
          - hello-world
          - includeBytes
          - log
          - missing-backend
          - multiple-set-cookie
          - object-store
          - random
          - regex
          - request-cache-key
          - request-clone
          - request-downstream
          - request-headers
          - request-limits
          - request-upstream
          - response
          - response-headers
          - secret-store
          - status
          - streaming-close
          - tee
          - timers
    steps:
    - name: Checkout fastly/js-compute-runtime
      uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Set up Fastly CLI
      uses: fastly/compute-actions/setup@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        cli_version: '7.0.1'

    - name: Restore Viceroy from cache
      uses: actions/cache@v3
      with:
        path: "/home/runner/.cargo/bin/viceroy"
        key: crate-cache-viceroy-${{ env.viceroy_version }}

    # https://github.com/fastly/js-compute-runtime/issues/361
    # TODO: Use engine-debug on all apps once we upgrade to FF 109
    - name: Download Engine
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.fixture == 'regex' && 'engine-release' || 'engine-debug'  }}
    - run: yarn install --frozen-lockfile

    - name: js-compute Integration Tests Job
      timeout-minutes: 20
      uses: ./.github/actions/compute-sdk-test
      with:
        fixture: ${{ matrix.fixture }}


  shellcheck:
    env:
      SHELLCHECK_VERSION: v0.8.0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache-shellcheck
      with:
        path: ${{ runner.tool_cache }}/shellcheck
        key: shellcheck-${{ runner.os }}-${{ env.SHELLCHECK_VERSION }}

    - name: Download shellcheck
      if: steps.cache-shellcheck.output.cache-hit != 'true'
      run: |
        version="${{ env.SHELLCHECK_VERSION }}"
        baseurl="https://github.com/koalaman/shellcheck/releases/download"

        curl -Lso "shellcheck.tar.xz" \
          "${baseurl}/${version}/shellcheck-${version}.linux.x86_64.tar.xz"

        mkdir -p "${{ runner.tool_cache }}/shellcheck/bin"

        tar -xf shellcheck.tar.xz -C "${{ runner.tool_cache }}/shellcheck/bin"

    - name: Add shellcheck to path
      run: echo "${{ runner.tool_cache }}/shellcheck/bin" >> $GITHUB_PATH

    - name: Run shellcheck
      run: ci/shellcheck.sh

  format:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: |
        clang-format --version
        ci/clang-format.sh
    - run: |
        ci/rustfmt.sh

  test-npm-package:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Download Engine
      uses: actions/download-artifact@v3
      with:
        name: engine-release
    - name: Locate component resources
      run: |
        cp c-dependencies/js-compute-runtime/xqd.wit .
        cp c-dependencies/js-compute-runtime/wasi_snapshot_preview1.wasm .
    - run: yarn
      shell: bash
    - run: npm test

  e2e:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        fixture: 
          - 'async-select'
          - 'byte-repeater'
          - 'cache-override'
          - 'edge-dictionary'
          - 'error'
          - 'geoip'
          - 'hello-world'
          - 'multiple-set-cookie'
          - 'object-store'
          - 'request-clone'
          - 'request-headers'
          - 'request-limits'
          - 'request-upstream'
          - 'response'
          - 'response-headers'
          - secret-store
          - 'status'
          - 'timers'
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        fixture: ${{ matrix.fixture }}
