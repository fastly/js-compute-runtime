name: CI
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow}}
  cancel-in-progress: true
on:
  push:
    branches: [main]
    tags-ignore: [dev]
  pull_request:
    branches:
defaults:
  run:
    shell: bash
env:
  wizer_version: 1.3.3
  viceroy_version: 0.2.15

jobs:
  build_engine:
    name: Build Engine
    strategy:
      matrix:
        profile: [debug, release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: ./.github/actions/cache-crates
      with:
        lockfiles: 'c-dependencies/js-compute-runtime/**/Cargo.lock'

    - uses: ./.github/actions/install-rust
      with:
        path: c-dependencies

    - name: Cache SpiderMonkey object files
      uses: actions/cache@v2
      id: sm-cache
      with:
        path: |
          c-dependencies/spidermonkey/${{ matrix.profile }}
        key: cache-${{ hashFiles(
            'c-dependencies/spidermonkey/build-engine.sh',
            'c-dependencies/spidermonkey/gecko-revision',
            'c-dependencies/spidermonkey/object-files.list',
            'c-dependencies/rust-toolchain.toml'
          ) }}-${{ matrix.profile }}
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    - name: "Build SpiderMonkey"
      if: steps.sm-cache.outputs.cache-hit != 'true'
      run: |
        cd c-dependencies/spidermonkey/
        bash ./build-engine.sh ${{ matrix.profile }}

    - name: "Install wasi-sdk (linux)"
      run: |
        set -x
        curl -sS -L -O https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-linux.tar.gz
        tar xf wasi-sdk-12.0-linux.tar.gz
        sudo mkdir -p /opt/wasi-sdk
        sudo mv wasi-sdk-12.0/* /opt/wasi-sdk/

    - name: "Install Binaryen (linux)"
      run: |
        set -x
        export BINARYEN_VERSION=105
        curl -sS -L "https://github.com/WebAssembly/binaryen/releases/download/version_${BINARYEN_VERSION}/binaryen-version_${BINARYEN_VERSION}-x86_64-linux.tar.gz" | tar xzf - &&
        echo "$PWD/binaryen-version_${BINARYEN_VERSION}/bin" >> $GITHUB_PATH

    - name: Cache built Rust dependencies
      uses: actions/cache@v3
      with:
        path: c-dependencies/js-compute-runtime/rusturl
        key: engine-cargo-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('c-dependencies/rust-toolchain.toml', 'c-dependencies/js-compute-runtime/**/Cargo.lock') }}
        # We trust cargo to only reuse valid parts of the cache when dependencies change.
        restore-keys: engine-cargo-${{ runner.os }}-${{ runner.arch }}-
      # Out of an abundance of caution, ensure that tagged releases rebuild all
      # crates from source.
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    - name: "Build JS runtime (debug)"
      run: DEBUG=1 CXX_OPT="-O1" make -C c-dependencies/js-compute-runtime DESTDIR=$PWD install
      if: matrix.profile == 'debug'

    - name: "Build JS runtime (release)"
      run: make -C c-dependencies/js-compute-runtime DESTDIR=$PWD install
      if: matrix.profile == 'release'

    - uses: actions/upload-artifact@v1
      with:
        name: engine-${{ matrix.profile }}
        path: dist

  ensure_cargo_installs:
    name: Ensure that all required "cargo install" commands are run, or we have a cache hit
    strategy:
      matrix:
        include:
          - crate: wizer
            version: 1.3.3 # Note: workflow-level env vars can't be used in matrix definitions
            options: "--all-features"
          - crate: viceroy
            version: 0.2.15 # Note: workflow-level env vars can't be used in matrix definitions
            options: ""
    runs-on: ubuntu-latest
    steps:
    - name: Cache ${{ matrix.crate }} ${{ matrix.version }}
      id: cache-crate
      uses: actions/cache@v2.1.5
      with:
        path: "/home/runner/.cargo/bin/${{ matrix.crate }}"
        key: crate-cache-${{ matrix.crate }}-${{ matrix.version }}
    - name: Install ${{ matrix.crate }} ${{ matrix.version }}
      run: cargo install ${{ matrix.crate }} ${{ matrix.options }} --version ${{ matrix.version }}
      if: steps.cache-crate.outputs.cache-hit != 'true'

  run_wpt:
    name: Run Web Platform Tests
    strategy:
      matrix:
        include:
          - profile: debug
          - profile: release
    needs: [build_engine, ensure_cargo_installs]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Download Engine
      uses: actions/download-artifact@v1
      with:
        name: engine-${{ matrix.profile }}

    - name: Restore Wizer from cache
      uses: actions/cache@v2.1.5
      with:
        path: "/home/runner/.cargo/bin/wizer"
        key: crate-cache-wizer-${{ env.wizer_version }}

    - name: Restore Viceroy from cache
      uses: actions/cache@v2.1.5
      with:
        path: "/home/runner/.cargo/bin/viceroy"
        key: crate-cache-viceroy-${{ env.viceroy_version }}

    - name: Build WPT runtime
      run: |
        cd engine-${{ matrix.profile }}
        bash ../tests/wpt-harness/build-wpt-runtime.sh

    - name: Prepare WPT hosts
      run: |
        cd tests/wpt-harness/wpt
        ./wpt make-hosts-file | sudo tee -a /etc/hosts

    - name: Run tests
      timeout-minutes: 20
      run: |
        cd engine-${{ matrix.profile }}
        # Skip slow tests when testing the debug runtime.
        node ../tests/wpt-harness/run-wpt.mjs -vv $(((${{ matrix.profile }} == "debug")) && echo "--skip-slow-tests")

  # Perform release builds of `js-compute-runtime`. Builds on
  # Windows/Mac/Linux, and artifacts are uploaded after the build is finished.
  # Note that we also run tests here to test exactly what we're deploying.
  build:
    name: Build js-compute-runtime
    needs: [build_engine]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - build: x86_64-linux
          os: ubuntu-latest
        - build: x86_64-macos
          os: macos-latest
        - build: x86_64-windows
          os: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/install-rust
    - uses: ./.github/actions/binary-compatible-builds

    - name: Download Engine
      uses: actions/download-artifact@v1
      with:
        name: engine-release

    - uses: ./.github/actions/cache-crates
      with:
        lockfiles: 'Cargo.lock'

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: target/
        key: runtime-cargo-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}
        # We trust cargo to only reuse valid parts of the cache when dependencies change.
        restore-keys: runtime-cargo-${{ runner.os }}-${{ runner.arch }}-
      # Out of an abundance of caution, ensure that tagged releases rebuild all
      # crates from source.
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    # Build `js-compute-runtime`
    - run: PREBUILT_ENGINE=engine-release/js-compute-runtime.wasm $CENTOS cargo build --release

    # Test what we just built.
    # (Disabled for now since we don't actually have any tests for this prototype :/)
    # - run: |
    #     cargo test
    #   env:
    #     RUST_BACKTRACE: 1

    # ... and now perform some goop to move all the relevant artifacts into
    # something that we'll upload from this action.

    - run: mkdir dist

    # Move binaries to dist folder
    - run: cp target/release/js-compute-runtime dist
      if: matrix.os != 'windows-latest' && matrix.target == ''
    - run: cp target/release/js-compute-runtime.exe dist
      if: matrix.build == 'x86_64-windows'

    - uses: actions/upload-artifact@v1
      with:
        name: bins-${{ matrix.build }}
        path: dist

  # Consumes all published artifacts from all the previous build steps, creates
  # a bunch of tarballs for all of them, and then publishes the tarballs
  # themselves as an artifact (for inspection) and then optionally creates
  # github releases and/or tags for pushes.
  publish:
    name: Publish
    needs:
      - run_wpt
      - sdktest
      - e2e-async-select
      - e2e-byte-repeater
      - e2e-edge-dictionary
      - e2e-error
      - e2e-geoip
      - e2e-hello-world
      - e2e-object-store
      - e2e-request-limits
      - e2e-request-upstream
      - e2e-response-headers
      - e2e-status
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Download binaries
      uses: actions/download-artifact@v3

    - name: Calculate tag name
      run: |
        name=dev
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          name=${GITHUB_REF:10}
        fi
        echo ::set-output name=val::$name
        echo TAG=$name >> $GITHUB_ENV
      id: tagname

    # Assemble all the build artifacts into tarballs and zip archives.
    - name: Assemble tarballs
      run: |
        ./ci/build-tarballs.sh x86_64-linux
        ./ci/build-tarballs.sh x86_64-macos
        ./ci/build-tarballs.sh x86_64-windows .exe

    # Upload all assembled tarballs as an artifact of the github action run, so
    # that way even PRs can inspect the output.
    - uses: actions/upload-artifact@v1
      with:
        name: tarballs
        path: dist

    # ... and if this was an actual push (tag or `main`) then we publish a
    # new release. This'll automatically publish a tag release or update `dev`
    # with this `sha`
    - name: Publish Release
      uses: ./.github/actions/github-release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      with:
        files: "dist/*"
        name: ${{ steps.tagname.outputs.val }}
        token: ${{ secrets.GITHUB_TOKEN }}

  # Consumes all published artifacts from all the previous build steps, and runs
  # the integration tests for the linux build.
  sdktest:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout fastly/js-compute-runtime
      uses: actions/checkout@v2

    - name: Set up Fastly CLI
      uses: fastly/compute-actions/setup@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Restore Viceroy from cache
      uses: actions/cache@v2.1.5
      with:
        path: "/home/runner/.cargo/bin/viceroy"
        key: crate-cache-viceroy-${{ env.viceroy_version }}


    - name: Download x86_64 Linux binaries
      uses: actions/download-artifact@v1
      with:
        name: bins-x86_64-linux

    # Move the downloaded binary from the build step into the bins directory in
    # the integration-tests directory
    - name: Move x86_64 Linux binaries
      run: |
        arch="x86_64"
        platform="linux"

        mkdir -p "./target/release"
        mv "bins-$arch-$platform/js-compute-runtime" "./target/release/js-compute-runtime"

        chmod +x ./target/release/js-compute-runtime
        ./target/release/js-compute-runtime --help

    - name: js-compute Integration Tests Job
      timeout-minutes: 20
      uses: ./.github/actions/compute-sdk-test
      id: sdktest

  shellcheck:
    env:
      SHELLCHECK_VERSION: v0.8.0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v3.0.2
      id: cache-shellcheck
      with:
        path: ${{ runner.tool_cache }}/shellcheck
        key: shellcheck-${{ runner.os }}-${{ env.SHELLCHECK_VERSION }}

    - name: Download shellcheck
      if: steps.cache-shellcheck.output.cache-hit != 'true'
      run: |
        version="${{ env.SHELLCHECK_VERSION }}"
        baseurl="https://github.com/koalaman/shellcheck/releases/download"

        curl -Lso "shellcheck.tar.xz" \
          "${baseurl}/${version}/shellcheck-${version}.linux.x86_64.tar.xz"

        mkdir -p "${{ runner.tool_cache }}/shellcheck/bin"

        tar -xf shellcheck.tar.xz -C "${{ runner.tool_cache }}/shellcheck/bin"

    - name: Add shellcheck to path
      run: echo "${{ runner.tool_cache }}/shellcheck/bin" >> $GITHUB_PATH

    - name: Run shellcheck
      run: ci/shellcheck.sh

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        clang-format --version
        ci/clang-format.sh
    - run: |
        ci/rustfmt.sh

  test-npm-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: npm cit
      working-directory: ./sdk/js-compute

  e2e-async-select:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'async-select'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-byte-repeater:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'byte-repeater'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-edge-dictionary:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'edge-dictionary'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-error:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'error'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-geoip:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'geoip'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-hello-world:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'hello-world'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-object-store:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'object-store'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-request-limits:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'request-limits'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-request-upstream:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'request-upstream'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-response-headers:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'response-headers'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
  e2e-status:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - uses: ./.github/actions/e2e
      with:
        fixture: 'status'
        fastly-api-token: ${{ secrets.FASTLY_API_TOKEN }}
