{
  "GET /": {
    "environments": ["viceroy"],
    "downstream_request": {
      "method": "GET",
      "pathname": "/"
    },
    "downstream_response": {
      "status": 200
    },
    "logs": [
      "stdout :: Log: Happy birthday Aki and Yuki!",
      "stdout :: Log: Map: Map(2) { { a: 1, b: { c: 2 } } => 2, [Function foo] => {} }",
      "stdout :: Log: Set: Set(3) { { a: 1, b: { c: 2 } }, 2, 3 }",
      "stdout :: Log: Array: [1, 2, 3, [], 5]",
      "stdout :: Log: Object: { a: 1, b: 2, c: 3, d: [Function d], f: [Getter], g: [Function bar] }",
      "stdout :: Log: function: [Function]",
      "stdout :: Log: boolean: true",
      "stdout :: Log: undefined: undefined",
      "stdout :: Log: null: null",
      "stdout :: Log: proxy: { a: 21 }",
      "stdout :: Log: Infinity: Infinity",
      "stdout :: Log: NaN: NaN",
      "stdout :: Log: Symbol: Symbol(\"wow\")",
      "stdout :: Log: Error: (new Error(\"uh oh\", \"<stdin>\", 40))",
      "stdout :: Log: Number: 1",
      "stdout :: Log: Number: 1.111",
      "stdout :: Log: BigInt: 10n",
      "stdout :: Log: Date: new Date(1660816667120)",
      "stdout :: Log: string: cake",
      "stdout :: Log: RegExp: /magic/",
      "stdout :: Log: Int8Array: Int8Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: -97 }",
      "stdout :: Log: Uint8Array: Uint8Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 159 }",
      "stdout :: Log: Uint8ClampedArray: Uint8ClampedArray { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 255 }",
      "stdout :: Log: Int16Array: Int16Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: -31073 }",
      "stdout :: Log: Uint16Array: Uint16Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 34463 }",
      "stdout :: Log: Int32Array: Int32Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 99999 }",
      "stdout :: Log: Uint32Array: Uint32Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 99999 }",
      "stdout :: Log: Float32Array: Float32Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 99999 }",
      "stdout :: Log: Float64Array: Float64Array { 0: 1, 1: 3, 2: 4, 3: 2, 4: 5, 5: 6, 6: 99999 }",
      "stdout :: Log: BigInt64Array: BigInt64Array { 0: 1n, 1: 3n, 2: 4n, 3: 2n, 4: 5n, 5: 6n, 6: 99999n }",
      "stdout :: Log: BigUint64Array: BigUint64Array { 0: 1n, 1: 3n, 2: 4n, 3: 2n, 4: 5n, 5: 6n, 6: 99999n }",
      "stdout :: Log: WeakMap: WeakMap { <items unknown> }",
      "stdout :: Log: WeakSet: WeakSet { <items unknown> }",
      "stdout :: Log: Promise: Promise { <pending> }",
      "stdout :: Log: resolved promise: Promise { 9 }",
      "stdout :: Log: rejected promise: Promise { <rejected> (new Error(\"oops\", \"<stdin>\", 85)) }",
      "stdout :: Log: Response: Response { type: default, url: , status: 200, ok: true, statusText: \"\", version: 2, headers: {}, body: { locked: false }, bodyUsed: false }",
      "stdout :: Log: Request: Request { method: POST, url: https://www.fastly.com/, version: 2, headers: {}, body: null, bodyUsed: false }",
      "stdout :: Log: ReadableStream: ReadableStream { locked: false }",
      "stdout :: Log: TransformStream: TransformStream { readable: { locked: false }, writable: {} }",
      "stdout :: Log: WritableStream: WriteableStream {}",
      "stdout :: Log: URL: URL {}"
    ]
  }
}
