{"version":3,"file":"bundle.js","sources":["webpack:///./fixtures/async_select.ts"],"sourcesContent":["\"use strict\";\n/// <reference types=\"@fastly/js-compute\" />\naddEventListener(\"fetch\", (event) => {\n    let requestsData = [\n        {\n            url: \"http://provider1.org/TheURL1\",\n            backend: \"TheOrigin\",\n            header: \"fooname\",\n        },\n        {\n            url: \"http://provider2.org/TheURL2\",\n            backend: \"TheOrigin2\",\n            header: \"barname\",\n        },\n    ];\n    let pending = requestsData.map((data) => {\n        let request = new Request(data.url);\n        return fetch(request, { backend: data.backend });\n    });\n    event.respondWith(processUpstreamRequests(pending, requestsData));\n});\nasync function processUpstreamRequests(requests, requestsData) {\n    // Create our response headers we will be sending downstream\n    let responseHeaders = new Headers();\n    // Loop through our requests\n    for await (let response of select(requests)) {\n        // Check which response we got, so we know which header to\n        // copy over to our response headers\n        let { url, header } = requestsData.find((data) => data.url == response.url);\n        // Set the appropriate header on our response\n        let headerValue = response.headers.get(header);\n        if (headerValue == null) {\n            throw new Error(\"No header value on the response from the request with url \" +\n                response.url +\n                \" and with the header name: \" +\n                header);\n        }\n        responseHeaders.set(header, headerValue);\n    }\n    // Send our response downstream\n    return new Response(\"pong\", {\n        headers: responseHeaders,\n    });\n}\nasync function* select(promises) {\n    promises = promises.map((promise) => {\n        promise.finally(() => {\n            promises.splice(promises.indexOf(promise), 1);\n        });\n        return promise;\n    });\n    while (promises.length) {\n        yield await Promise.any(promises);\n    }\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}