{
  "Blob interface object": {
    "status": "PASS"
  },
  "Blob constructor with no arguments": {
    "status": "PASS"
  },
  "Blob constructor with no arguments, without 'new'": {
    "status": "PASS"
  },
  "Blob constructor without brackets": {
    "status": "PASS"
  },
  "Blob constructor with undefined as first argument": {
    "status": "PASS"
  },
  "Passing non-objects, Dates and RegExps for blobParts should throw a TypeError.": {
    "status": "PASS"
  },
  "A plain object with @@iterator should be treated as a sequence for the blobParts argument.": {
    "status": "PASS"
  },
  "A plain object with custom @@iterator should be treated as a sequence for the blobParts argument.": {
    "status": "PASS"
  },
  "A plain object with @@iterator and a length property should be treated as a sequence for the blobParts argument.": {
    "status": "PASS"
  },
  "A String object should be treated as a sequence for the blobParts argument.": {
    "status": "PASS"
  },
  "A Uint8Array object should be treated as a sequence for the blobParts argument.": {
    "status": "PASS"
  },
  "The length getter should be invoked and any exceptions should be propagated.": {
    "status": "PASS"
  },
  "ToUint32 should be applied to the length and any exceptions should be propagated.": {
    "status": "PASS"
  },
  "Getters and value conversions should happen in order until an exception is thrown.": {
    "status": "PASS"
  },
  "ToString should be called on elements of the blobParts array and any exceptions should be propagated.": {
    "status": "PASS"
  },
  "Changes to the blobParts array should be reflected in the returned Blob (pop).": {
    "status": "PASS"
  },
  "Changes to the blobParts array should be reflected in the returned Blob (unshift).": {
    "status": "PASS"
  },
  "ToString should be called on elements of the blobParts array.": {
    "status": "PASS"
  },
  "ArrayBuffer elements of the blobParts array should be supported.": {
    "status": "PASS"
  },
  "Passing typed arrays as elements of the blobParts array should work.": {
    "status": "PASS"
  },
  "Passing a Float16Array as element of the blobParts array should work.": {
    "status": "PASS"
  },
  "Passing a Float64Array as element of the blobParts array should work.": {
    "status": "PASS"
  },
  "Passing BigInt typed arrays as elements of the blobParts array should work.": {
    "status": "PASS"
  },
  "Passing a FrozenArray as the blobParts array should work (FrozenArray<MessagePort>).": {
    "status": "FAIL"
  },
  "Array with two blobs": {
    "status": "PASS"
  },
  "Array with two buffers": {
    "status": "PASS"
  },
  "Array with two bufferviews": {
    "status": "PASS"
  },
  "Array with mixed types": {
    "status": "PASS"
  },
  "options properties should be accessed in lexicographic order.": {
    "status": "PASS"
  },
  "Arguments should be evaluated from left to right.": {
    "status": "PASS"
  },
  "Passing null (index 0) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing null (index 0) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing undefined (index 1) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing undefined (index 1) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing object \"[object Object]\" (index 2) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing object \"[object Object]\" (index 2) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing object \"[object Object]\" (index 3) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing object \"[object Object]\" (index 3) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing object \"/regex/\" (index 4) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing object \"/regex/\" (index 4) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing function \"function() {}\" (index 5) for options should use the defaults.": {
    "status": "PASS"
  },
  "Passing function \"function() {}\" (index 5) for options should use the defaults (with newlines).": {
    "status": "PASS"
  },
  "Passing 123 for options should throw": {
    "status": "PASS"
  },
  "Passing 123.4 for options should throw": {
    "status": "PASS"
  },
  "Passing true for options should throw": {
    "status": "PASS"
  },
  "Passing \"abc\" for options should throw": {
    "status": "PASS"
  },
  "Blob with type \"\"": {
    "status": "PASS"
  },
  "Blob with type \"a\"": {
    "status": "PASS"
  },
  "Blob with type \"A\"": {
    "status": "PASS"
  },
  "Blob with type \"text/html\"": {
    "status": "PASS"
  },
  "Blob with type \"TEXT/HTML\"": {
    "status": "PASS"
  },
  "Blob with type \"text/plain;charset=utf-8\"": {
    "status": "PASS"
  },
  "Blob with type \"√•\"": {
    "status": "PASS"
  },
  "Blob with type \"êëæ\"": {
    "status": "PASS"
  },
  "Blob with type \" image/gif \"": {
    "status": "PASS"
  },
  "Blob with type \"\\timage/gif\\t\"": {
    "status": "PASS"
  },
  "Blob with type \"image/gif;\"": {
    "status": "PASS"
  },
  "Blob with type \"ƒ∞mage/gif\"": {
    "status": "PASS"
  },
  "Blob with type \"ƒ±mage/gif\"": {
    "status": "PASS"
  },
  "Blob with type \"image/gif\\0\"": {
    "status": "PASS"
  },
  "Blob with type \"unknown/unknown\"": {
    "status": "PASS"
  },
  "Blob with type \"text/plain\"": {
    "status": "PASS"
  },
  "Blob with type \"image/png\"": {
    "status": "PASS"
  }
}