{
  "ReadableStream teeing: rs.tee() returns an array of two ReadableStreams": {
    "status": "PASS"
  },
  "ReadableStream teeing: should be able to read one branch to the end without affecting the other": {
    "status": "PASS"
  },
  "ReadableStream teeing: values should be equal across each branch": {
    "status": "PASS"
  },
  "ReadableStream teeing: errors in the source should propagate to both branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling branch1 should not impact branch2": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling branch2 should not impact branch1": {
    "status": "PASS"
  },
  "Running templatedRSTeeCancel with ReadableStream teeing": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling both branches should aggregate the cancel reasons into an array": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling both branches in reverse order should aggregate the cancel reasons into an array": {
    "status": "PASS"
  },
  "ReadableStream teeing: failing to cancel the original stream should cause cancel() to reject on branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: erroring a teed stream should properly handle canceled branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: erroring a teed stream should error both branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: closing the original should immediately close the branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: erroring the original should immediately error the branches": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling branch1 should finish when branch2 reads until end of stream": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling branch1 should finish when original stream errors": {
    "status": "PASS"
  },
  "ReadableStream teeing: canceling both branches in sequence with delay": {
    "status": "PASS"
  },
  "ReadableStream teeing: failing to cancel when canceling both branches in sequence with delay": {
    "status": "PASS"
  },
  "ReadableStreamTee should not use a modified ReadableStream constructor from the global object": {
    "status": "PASS"
  },
  "ReadableStreamTee should not pull more chunks than can fit in the branch queue": {
    "status": "PASS"
  },
  "ReadableStreamTee should only pull enough to fill the emptiest queue": {
    "status": "PASS"
  },
  "ReadableStreamTee should not pull when original is already errored": {
    "status": "PASS"
  },
  "ReadableStreamTee stops pulling when original stream errors while branch 1 is reading": {
    "status": "PASS"
  },
  "ReadableStreamTee stops pulling when original stream errors while branch 2 is reading": {
    "status": "PASS"
  },
  "ReadableStreamTee stops pulling when original stream errors while both branches are reading": {
    "status": "PASS"
  },
  "ReadableStream teeing: enqueue() and close() while both branches are pulling": {
    "status": "PASS"
  }
}