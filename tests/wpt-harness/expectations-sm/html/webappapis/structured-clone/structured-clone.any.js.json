{
  "primitive undefined": {
    "status": "PASS"
  },
  "primitive null": {
    "status": "PASS"
  },
  "primitive true": {
    "status": "PASS"
  },
  "primitive false": {
    "status": "PASS"
  },
  "primitive string, empty string": {
    "status": "PASS"
  },
  "primitive string, lone high surrogate": {
    "status": "PASS"
  },
  "primitive string, lone low surrogate": {
    "status": "PASS"
  },
  "primitive string, NUL": {
    "status": "PASS"
  },
  "primitive string, astral character": {
    "status": "PASS"
  },
  "primitive number, 0.2": {
    "status": "PASS"
  },
  "primitive number, 0": {
    "status": "PASS"
  },
  "primitive number, -0": {
    "status": "PASS"
  },
  "primitive number, NaN": {
    "status": "PASS"
  },
  "primitive number, Infinity": {
    "status": "PASS"
  },
  "primitive number, -Infinity": {
    "status": "PASS"
  },
  "primitive number, 9007199254740992": {
    "status": "PASS"
  },
  "primitive number, -9007199254740992": {
    "status": "PASS"
  },
  "primitive number, 9007199254740994": {
    "status": "PASS"
  },
  "primitive number, -9007199254740994": {
    "status": "PASS"
  },
  "primitive BigInt, 0n": {
    "status": "PASS"
  },
  "primitive BigInt, -0n": {
    "status": "PASS"
  },
  "primitive BigInt, -9007199254740994000n": {
    "status": "PASS"
  },
  "primitive BigInt, -9007199254740994000900719925474099400090071992547409940009007199254740994000n": {
    "status": "PASS"
  },
  "Array primitives": {
    "status": "PASS"
  },
  "Object primitives": {
    "status": "PASS"
  },
  "Boolean true": {
    "status": "PASS"
  },
  "Boolean false": {
    "status": "PASS"
  },
  "Array Boolean objects": {
    "status": "PASS"
  },
  "Object Boolean objects": {
    "status": "PASS"
  },
  "String empty string": {
    "status": "PASS"
  },
  "String lone high surrogate": {
    "status": "PASS"
  },
  "String lone low surrogate": {
    "status": "PASS"
  },
  "String NUL": {
    "status": "PASS"
  },
  "String astral character": {
    "status": "PASS"
  },
  "Array String objects": {
    "status": "PASS"
  },
  "Object String objects": {
    "status": "PASS"
  },
  "Number 0.2": {
    "status": "PASS"
  },
  "Number 0": {
    "status": "PASS"
  },
  "Number -0": {
    "status": "PASS"
  },
  "Number NaN": {
    "status": "PASS"
  },
  "Number Infinity": {
    "status": "PASS"
  },
  "Number -Infinity": {
    "status": "PASS"
  },
  "Number 9007199254740992": {
    "status": "PASS"
  },
  "Number -9007199254740992": {
    "status": "PASS"
  },
  "Number 9007199254740994": {
    "status": "PASS"
  },
  "Number -9007199254740994": {
    "status": "PASS"
  },
  "BigInt -9007199254740994n": {
    "status": "PASS"
  },
  "Array Number objects": {
    "status": "PASS"
  },
  "Object Number objects": {
    "status": "PASS"
  },
  "Date 0": {
    "status": "PASS"
  },
  "Date -0": {
    "status": "PASS"
  },
  "Date -8.64e15": {
    "status": "PASS"
  },
  "Date 8.64e15": {
    "status": "PASS"
  },
  "Array Date objects": {
    "status": "PASS"
  },
  "Object Date objects": {
    "status": "PASS"
  },
  "RegExp flags and lastIndex": {
    "status": "PASS"
  },
  "RegExp sticky flag": {
    "status": "PASS"
  },
  "RegExp unicode flag": {
    "status": "PASS"
  },
  "RegExp empty": {
    "status": "PASS"
  },
  "RegExp slash": {
    "status": "PASS"
  },
  "RegExp new line": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp flags and lastIndex": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp sticky flag": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp unicode flag": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp empty": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp slash": {
    "status": "PASS"
  },
  "Array RegExp object, RegExp new line": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp flags and lastIndex": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp sticky flag": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp unicode flag": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp empty": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp slash": {
    "status": "PASS"
  },
  "Object RegExp object, RegExp new line": {
    "status": "PASS"
  },
  "Empty Error object": {
    "status": "PASS"
  },
  "Error object": {
    "status": "PASS"
  },
  "EvalError object": {
    "status": "PASS"
  },
  "RangeError object": {
    "status": "PASS"
  },
  "ReferenceError object": {
    "status": "PASS"
  },
  "SyntaxError object": {
    "status": "PASS"
  },
  "TypeError object": {
    "status": "PASS"
  },
  "URIError object": {
    "status": "PASS"
  },
  "Blob basic": {
    "status": "FAIL"
  },
  "Blob unpaired high surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Blob unpaired low surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Blob paired surrogates (invalid utf-8)": {
    "status": "FAIL"
  },
  "Blob empty": {
    "status": "FAIL"
  },
  "Blob NUL": {
    "status": "FAIL"
  },
  "Array Blob object, Blob basic": {
    "status": "FAIL"
  },
  "Array Blob object, Blob unpaired high surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Array Blob object, Blob unpaired low surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Array Blob object, Blob paired surrogates (invalid utf-8)": {
    "status": "FAIL"
  },
  "Array Blob object, Blob empty": {
    "status": "FAIL"
  },
  "Array Blob object, Blob NUL": {
    "status": "FAIL"
  },
  "Array Blob object, two Blobs": {
    "status": "FAIL"
  },
  "Object Blob object, Blob basic": {
    "status": "FAIL"
  },
  "Object Blob object, Blob unpaired high surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Object Blob object, Blob unpaired low surrogate (invalid utf-8)": {
    "status": "FAIL"
  },
  "Object Blob object, Blob paired surrogates (invalid utf-8)": {
    "status": "FAIL"
  },
  "Object Blob object, Blob empty": {
    "status": "FAIL"
  },
  "Object Blob object, Blob NUL": {
    "status": "FAIL"
  },
  "File basic": {
    "status": "FAIL"
  },
  "Array sparse": {
    "status": "PASS"
  },
  "Array with non-index property": {
    "status": "PASS"
  },
  "Object with index property and length": {
    "status": "PASS"
  },
  "Array with circular reference": {
    "status": "PASS"
  },
  "Object with circular reference": {
    "status": "PASS"
  },
  "Array with identical property values": {
    "status": "PASS"
  },
  "Object with identical property values": {
    "status": "PASS"
  },
  "Object with property on prototype": {
    "status": "PASS"
  },
  "Object with non-enumerable property": {
    "status": "PASS"
  },
  "Object with non-writable property": {
    "status": "PASS"
  },
  "Object with non-configurable property": {
    "status": "PASS"
  },
  "Object with a getter that throws": {
    "status": "PASS"
  },
  "ObjectPrototype must lose its exotic-ness when cloned": {
    "status": "PASS"
  },
  "Serializing a non-serializable platform object fails": {
    "status": "FAIL"
  },
  "An object whose interface is deleted from the global must still deserialize": {
    "status": "FAIL"
  },
  "A subclass instance will deserialize as its closest serializable superclass": {
    "status": "FAIL"
  },
  "Resizable ArrayBuffer": {
    "status": "FAIL"
  },
  "Growable SharedArrayBuffer": {
    "status": "FAIL"
  },
  "Length-tracking TypedArray": {
    "status": "FAIL"
  },
  "Length-tracking DataView": {
    "status": "FAIL"
  },
  "Serializing OOB TypedArray throws": {
    "status": "FAIL"
  },
  "Serializing OOB DataView throws": {
    "status": "FAIL"
  },
  "ArrayBuffer": {
    "status": "PASS"
  },
  "MessagePort": {
    "status": "FAIL"
  },
  "A detached ArrayBuffer cannot be transferred": {
    "status": "FAIL"
  },
  "A detached platform object cannot be transferred": {
    "status": "FAIL"
  },
  "Transferring a non-transferable platform object fails": {
    "status": "FAIL"
  },
  "An object whose interface is deleted from the global object must still be received": {
    "status": "FAIL"
  },
  "A subclass instance will be received as its closest transferable superclass": {
    "status": "FAIL"
  },
  "Resizable ArrayBuffer is transferable": {
    "status": "FAIL"
  },
  "Length-tracking TypedArray is transferable": {
    "status": "FAIL"
  },
  "Length-tracking DataView is transferable": {
    "status": "FAIL"
  },
  "Transferring OOB TypedArray throws": {
    "status": "FAIL"
  },
  "Transferring OOB DataView throws": {
    "status": "FAIL"
  }
}